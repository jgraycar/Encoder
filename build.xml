<project name="Encoder" default = "bundle-app" basedir=".">
  <description>
    Build file for EncoderGUI
  </description>
  <property name="src" location="src"/>
  <property name="build" location="build"/>
  <property name="dist" location="dist"/>
  <property name="key-alias" value="EncoderKey"/>
  <property name="store-pass" value="bibbles"/>
  <property name="Main-Class" value="enc.EncoderGUI"/>
  <property name="builder" value="Joel Graycar"/>
  <property name="volname" value="Encoder"/>
  <property environment="env"/>
  <property name="keystore" location="${env.HOME}/.keystore"/>

  <path id="build.classpath">
    <fileset dir="lib">
      <include name="**/*.jar"/>
      <exclude name="**/appbundler*"/>
    </fileset>
  </path>

  <pathconvert property="mf.classpath" pathsep=" ">
    <path refid="build.classpath"/>
    <mapper>
      <chainedmapper>
	<flattenmapper/>
	<globmapper from="*.jar" to="lib/*.jar"/>
      </chainedmapper>
    </mapper>
  </pathconvert>

  <target name="display-mf">
    <echo message="mf.classpath:"/>
    <echo message="${mf.classpath}"/>
  </target>

  <target name="display-classpath"
          description="display classpath used in jar file generation">
    <!-- Write the classpath to the console. Helpful for debugging -->
    <!-- Create one line per classpath element-->
    <pathconvert pathsep="${line.separator}"
                 property="echo.classpath"
                 refid="build.classpath"/>
    <!-- Write the result to the console -->
    <echo message="build.classpath:"/>
    <echo message="${echo.classpath}"/>
  </target>

  <target name="init">
    <!-- Create time stamp -->
    <tstamp/>
    <!-- Create build directory structure used by compile -->
    <mkdir dir="${build}"/>
  </target>

  <target name="compile" depends="init"
          description="compile source">
    <!-- Compile java code from ${src} into ${build} -->
    <javac includeantruntime="false" srcdir="${src}" destdir="${build}"
           classpathref="build.classpath"/>
  </target>

  <target name="test" depends="compile"
          description="generate the distribution jar file" >
    <!-- Create the distribution directory -->
    <mkdir dir="${dist}/lib"/>
    <!-- Put everything in ${build} and resources into Encoder.jar file -->
    <jar jarfile="${dist}/lib/${volname}.jar">
      <fileset dir="${build}"/>
      <fileset dir="${src}/resources"/>
      <fileset dir="." includes="lib/**/**.jar"/>
      <manifest>
        <attribute name="Main-Class" value="${Main-Class}"/>
        <attribute name="Built-By" value="${builder}"/>
        <attribute name="Class-Path" value="${mf.classpath}"/>
      </manifest>
    </jar>
  </target>

  <target name="jar" depends="compile"
          description="generate the distribution jar file" >
    <!-- Create the distribution directory -->
    <mkdir dir="${dist}/lib"/>
    <!-- Set up jar classpath -->
    <manifestclasspath property="jar.classpath"
                       jarfile="${dist}/lib/Encoder.jar">
      <classpath refid="build.classpath"/>
    </manifestclasspath>
    <!-- Put everything in ${build} and resources into Encoder.jar file -->
    <jar jarfile="${dist}/lib/${volname}.jar">
      <fileset dir="${build}"/>
      <fileset dir="${src}/resources"/>
      <manifest>
        <attribute name="Main-Class" value="${Main-Class}"/>
        <attribute name="Built-By" value="${builder}"/>
        <attribute name="Class-Path" value="${jar.classpath}"/>
      </manifest>
    </jar>
  </target>

  <target name="run-jar" depends="jar"
          description="creates and runs the distribution jar file">
    <java jar="${dist}/lib/${volname}.jar" fork="true"/>
  </target>

  <target name="clean"
          description="removes all non-source directories">
    <!-- Delete the ${build} and ${dist} directory trees, and dmg file -->
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
    <delete file="${volname}.dmg"/>
  </target>

  <target name="sign-jar" depends="jar"
          description="sign jar file using jarsigner tool.">
    <signjar jar="${dist}/lib/${volname}.jar"
             alias="${key-alias}"
             keystore="${keystore}"
             storepass="${store-pass}"/>
  </target>

  <taskdef name="bundleapp"
             classname="com.oracle.appbundler.AppBundlerTask"
             classpath="lib/appbundler-1.0.jar" />

  <target name="bundle-app" depends="jar"
          description="creates the Mac OS executable app file">
      <bundleapp outputdirectory="dist"
            name="${volname}"
            displayname="${volname}"
            identifier="enc.EncoderGUI"
            mainclassname="enc.EncoderGUI"
            icon="${src}/resources/app_icon.icns">
            <runtime dir="${env.JAVA_HOME}"/>
            <classpath file="dist/lib/${volname}.jar" />
            <classpath dir="lib"/>
      </bundleapp>
  </target>

  <target name="run-app" depends="bundle-app"
          description="creates and runs the Mac OS executable app file">
    <exec executable="/usr/bin/open" os="Mac OS X" failonerror="true">
      <arg value="${dist}/${volname}.app"/>
    </exec>
  </target>

  <target name="dmg" depends="bundle-app"
          description="create disc image file containing app file">
    <delete file="${volname}.dmg"/>
    <exec executable="/usr/bin/hdiutil" os="Mac OS X" failonerror="true">
      <arg value="create"/>
      <arg value="-srcfolder"/>
      <arg value="dist/${volname}.app"/>
      <arg value="-fs"/>
      <arg value="MS-DOS"/>
      <arg value="-volname"/>
      <arg value="${volname}"/>
      <arg value="./${volname}"/>
    </exec>
  </target>

</project>
